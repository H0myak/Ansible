# Managed by ansible

vcl 4.0;

{% for module in  modules  %}
import {{ module }};
{% endfor %}

{% for probe in  probes.values() %}
probe {{ probe.name }} {
    .url = "{{ probe.url }}";
    .timeout = {{ probe.timeout }};
    .interval = {{ probe.interval }};
    .window = {{ probe.window }};
    .threshold = {{ probe.threshold }};
}
{% endfor %}

{% for backend in  backends.values() %}
backend {{ backend.name }} {
    .host = "{{ backend.host }}";
    .port = "{{ backend.port }}";
    .probe = {{ backend.probe }};
}
{% endfor %}

{% if lb == true %}
sub vcl_init {
{% for lb_site in  lb_sites.values() %}
    new {{ lb_site.name }} = directors.round_robin();
{% for lb_unit in  lb_site.units %}
    {{ lb_site.name }}.add_backend({{ lb_unit }});
{% endfor %}
}
{% endfor %}
{% endif %}

sub vcl_recv {
{% if enable_ip_header_forward == true %}
    unset req.http.{{ dst_ip_header }};
    set req.http.{{ dst_ip_header }} = {{ src_ip_header }};
{% endif %}

{% if domains is defined %}
{% for domain in  domains.values() %}
    if (req.http.host ~ "{{ domain.name }}") {
{% if domain.unset_user_cookie == true %}
        if (req.http.cookie ~ "^\s*$") {
           unset req.http.cookie;
           }
{% endif %}
        set req.backend_hint = {{ domain.backend }};
    }

{% endfor %}
{% endif %}
{% if default_backend.unset_user_cookie == true %}
    if (req.http.cookie ~ "^\s*$") {
        unset req.http.cookie;
        }
{% endif %}
    set req.backend_hint = {{ default_backend.backend }};
}

sub vcl_backend_response {
    if (bereq.url ~ "({% for file_format in static_files_format %}{{ file_format }}{% if not loop.last %}|{% endif %}{% endfor %})") {
        unset beresp.http.cookie;
        set beresp.http.Cache-Control = "static, max-age={{ cache_ttl }}";
{% if file_storage_name is defined %}
        set beresp.storage_hint = "{{ file_storage_name }}";
        set beresp.http.x-storage = "{{ file_storage_name }}";
{% endif %}
        set beresp.ttl = {{ cache_ttl }}s;
        }
    if (beresp.http.Cache-Control ~ "(?i)no-cache") {
        set beresp.uncacheable = true;
        }
{% if uncacheable_by_default == true %}
    set beresp.uncacheable = true;
{% endif %}
}

{% if remove_headers is defined %}
sub vcl_deliver {
{% for remove_header in remove_headers %}
    unset resp.http.{{ remove_header }};
{% endfor %}
}
{% endif %}

sub vcl_backend_error {

    if(beresp.status == 503) {
        set beresp.status = 666;
        synthetic({"Something going wrong..."});
    }
    return (deliver);
}
